version: "3.8"

services:

  front:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - frontend_nw

  db:
    image: postgres:14.6
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - course_7_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 3s
      retries: 15
    networks:
      - backend_nw
      - bot_nw

  api:
    image: zidolch/homework_38:latest
    env_file: .env
    restart: always
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_nw
      - frontend_nw

  bot:
    image: zidolch/homework_38:latest
    restart: on-failure
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: python manage.py runbot
    networks:
      - bot_nw

volumes:
  course_7_pg_data:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge
  bot_nw:
    driver: bridge

